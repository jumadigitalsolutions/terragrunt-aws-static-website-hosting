name: Infrastructure - S3 CloudFront

on:
  workflow_dispatch: # Allows manually triggering the workflow
    inputs: # Declare inputs for the workflow
      deploy_module:
        description: 'Deploy Module'
        required: false
        default: 's3-cloudfront'
        type: choice
        options:
          - vpc
          - s3-cloudfront
          - ecs-fargate

  push: # Triggers the workflow on a push to the main branch  
    branches: [ main, dev ]
    paths: # Only triggers the pipeline upon S3-CloudFront code changes
      - 'terragrunt/modules/s3-cloudfront/**'
      - 'terragrunt/live/**/s3-cloudfront/**'
      - '.github/workflows/infra-s3-cloudfront.yml'
  pull_request: # Same as push triggers, but for PR validation
    branches: [ main, dev ]
    paths:  # Only triggers the pipeline upon S3-CloudFront code changes
      - 'terragrunt/modules/s3-cloudfront/**'
      - 'terragrunt/live/**/s3-cloudfront/**'
      - '.github/workflows/infra-s3-cloudfront.yml'

# Security context for AWS authentication
permissions:
  security-events: write    # Required for uploading SARIF results
  pull-requests: read       # Required for PR comments
  contents: write           # Required for checkout
  id-token: write           # Required for OIDC AWS auth
  statuses: write           # Required for commit statuses
  actions: read             # Required for workflow runs
  pages: write              # For documentation if needed
  checks: write             # Required for detailed SARIF results

env:
  tf_version: 1.11.2 # Terraform version
  tg_version: 0.75.10 # Terragrunt version     
  deploy_module: ${{ inputs.deploy_module || 's3-cloudfront' }} # Module directory name

jobs:
  # Setup job to determine variables
  setup:
    name: Setup Variables
    runs-on: ubuntu-latest
    outputs:
      deploy_module: ${{ steps.set_variables.outputs.deploy_module }}
    steps:
      - id: set_variables
        name: Set Default Variables
        env:
          DEPLOY_MODULE: ${{ inputs.deploy_module }}
        run: |
          echo "deploy_module=${DEPLOY_MODULE:-s3-cloudfront}" >> $GITHUB_OUTPUT

  # Terragrunt HCL Format Checks for DEV Environment
  check-dev-code:
    name: Check Dev Infrastructure Code
    runs-on: ubuntu-latest
    environment: dev
    needs: [setup]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set environment name
        id: env_name
        run: echo "environment=dev" >> $GITHUB_OUTPUT

      - name: Check terragrunt HCL for DEV Environment
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_command: 'hclfmt --check --non-interactive --diff'
          tg_dir: terragrunt/live/${{ vars.AWS_REGION }}/dev/${{ needs.setup.outputs.deploy_module }}

  # Security scanning for DEV environment
  security-scan-dev:
    name: Security Scan Dev
    runs-on: ubuntu-latest
    environment: dev
    needs: [setup]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: terragrunt/live/${{ vars.AWS_REGION }}/dev/${{ needs.setup.outputs.deploy_module }}
          quiet: true
          output_format: cli,sarif
          output_file_path: console,checkov-dev-results.sarif
          soft_fail: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-dev-results.sarif
          wait-for-processing: true
        continue-on-error: false

  # Plan DEV infrastructure changes
  plan-dev:
    name: Plan Dev Infrastructure
    runs-on: ubuntu-latest
    environment: dev
    needs: [check-dev-code, security-scan-dev, setup]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set environment name
      id: env_name
      run: echo "environment=dev" >> $GITHUB_OUTPUT

    - name: Debug directory structure
      run: |
        echo "Working directory: $(pwd)"
        ls -la
        echo "Checking terragrunt directories:"
        find terragrunt -type d | sort
        echo "Looking for terragrunt.hcl files:"
        find terragrunt -name "terragrunt.hcl" | sort

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-execution-role-terragrunt-aws-static-website-hosting
        aws-region: ${{ vars.AWS_REGION }}
        role-session-name: GitHubActions-${{ steps.env_name.outputs.environment }}

    - name: Terragrunt Plan
      uses: gruntwork-io/terragrunt-action@v2
      with:
        tf_version: ${{ env.tf_version }}
        tg_version: ${{ env.tg_version }}
        tg_dir: terragrunt/live/${{ vars.AWS_REGION }}/${{ steps.env_name.outputs.environment }}/${{ needs.setup.outputs.deploy_module }}
        tg_comment: true # Comment on the PR with the Terragrunt plan output
        tg_command: 'run-all plan -out=tfplan --terragrunt-non-interactive'
    
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: dev-tfplan
        path: terragrunt/live/${{ vars.AWS_REGION || 'us-east-1' }}/dev/${{ needs.setup.outputs.deploy_module }}/tfplan
        retention-days: 1

  # Apply DEV infrastructure changes
  apply-dev:
    name: Apply Dev Infrastructure
    needs: [plan-dev, setup]
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set environment name
      id: env_name
      run: echo "environment=dev" >> $GITHUB_OUTPUT

    - name: Debug directory structure
      run: |
        echo "Working directory: $(pwd)"
        ls -la
        echo "Checking terragrunt directories:"
        find terragrunt -type d | sort
        echo "Looking for terragrunt.hcl files:"
        find terragrunt -name "terragrunt.hcl" | sort

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-execution-role-terragrunt-aws-static-website-hosting
        aws-region: ${{ vars.AWS_REGION }}
        role-session-name: GitHubActions-${{ steps.env_name.outputs.environment }}
    
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: dev-tfplan
        path: terragrunt/live/${{ vars.AWS_REGION || 'us-east-1' }}/dev/${{ needs.setup.outputs.deploy_module }}

    - name: Terragrunt Apply
      uses: gruntwork-io/terragrunt-action@v2
      with:
        tf_version: ${{ env.tf_version }}
        tg_version: ${{ env.tg_version }}
        tg_dir: terragrunt/live/${{ vars.AWS_REGION || 'us-east-1' }}/dev/${{ needs.setup.outputs.deploy_module }}
        tg_command: 'run-all apply tfplan --terragrunt-non-interactive'

  # Terragrunt HCL Format Checks for PROD Environment
  check-prod-code:
    name: Check Prod Infrastructure Code
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [apply-dev, setup]  # Only start after dev environment is fully deployed
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check terragrunt HCL for PROD Environment
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_command: 'hclfmt --check --non-interactive --diff'
          tg_dir: terragrunt/live/${{ vars.AWS_REGION }}/prod/${{ needs.setup.outputs.deploy_module }}

  # Security scanning for PROD environment
  security-scan-prod:
    name: Security Scan Prod
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [apply-dev, setup]  # Only start after dev environment is fully deployed
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: terragrunt/live/${{ vars.AWS_REGION }}/prod/${{ needs.setup.outputs.deploy_module }}
          quiet: true
          output_format: cli,sarif
          output_file_path: console,checkov-prod-results.sarif
          soft_fail: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-prod-results.sarif
          wait-for-processing: true
        continue-on-error: false

  # Plan PROD infrastructure changes
  plan-prod:
    name: Plan Prod Infrastructure
    needs: [check-prod-code, security-scan-prod, setup]  # Wait for both prod checks to complete
    runs-on: ubuntu-latest
    environment: prod
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set environment name
      id: env_name
      run: echo "environment=prod" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-execution-role-terragrunt-aws-static-website-hosting
        aws-region: ${{ vars.AWS_REGION }}
        role-session-name: GitHubActions-${{ steps.env_name.outputs.environment }}

    - name: Terragrunt Plan
      uses: gruntwork-io/terragrunt-action@v2
      with:
        tf_version: ${{ env.tf_version }}
        tg_version: ${{ env.tg_version }}
        tg_dir: terragrunt/live/${{ vars.AWS_REGION }}/${{ steps.env_name.outputs.environment }}/${{ needs.setup.outputs.deploy_module }}
        tg_comment: true
        tg_command: 'run-all plan -out=tfplan --terragrunt-non-interactive'
    
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: prod-tfplan
        path: terragrunt/live/${{ vars.AWS_REGION }}/prod/${{ needs.setup.outputs.deploy_module }}/tfplan
        retention-days: 1

  # Apply PROD infrastructure changes
  apply-prod:
    name: Apply Prod Infrastructure
    needs: [plan-prod, setup]
    runs-on: ubuntu-latest
    environment: prod
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set environment name
      id: env_name
      run: echo "environment=prod" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-execution-role-terragrunt-aws-static-website-hosting
        aws-region: ${{ vars.AWS_REGION }}
        role-session-name: GitHubActionsSessionForTerragruntAWSStaticWebsiteHosting-${{ steps.env_name.outputs.environment }}
    
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: prod-tfplan
        path: terragrunt/live/${{ vars.AWS_REGION }}/prod/${{ needs.setup.outputs.deploy_module }}

    - name: Terragrunt Apply
      uses: gruntwork-io/terragrunt-action@v2
      with:
        tf_version: ${{ env.tf_version }}
        tg_version: ${{ env.tg_version }}
        tg_dir: terragrunt/live/${{ vars.AWS_REGION }}/prod/${{ needs.setup.outputs.deploy_module }}
        tg_command: 'run-all apply tfplan --terragrunt-non-interactive'
