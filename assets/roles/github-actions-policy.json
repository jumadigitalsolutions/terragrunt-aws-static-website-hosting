{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"s3:ListBucket",
				"s3:GetObject",
				"s3:PutObject",
				"s3:DeleteObject",
				"s3:GetBucketPolicy",
				"s3:PutBucketPolicy",
				"s3:CreateBucket",
				"s3:DeleteBucket",
				"s3:PutBucketVersioning",
				"s3:PutBucketConfiguration",
				"s3:GetBucketVersioning",
				"s3:GetEncryptionConfiguration",
				"s3:PutBucketPublicAccessBlock",
				"s3:GetBucketPublicAccessBlock",
				"s3:PutBucketWebsite",
				"s3:GetBucketWebsite"
			],
			"Resource": [
				"arn:aws:s3:::jumads-hippo-terraform-state",
				"arn:aws:s3:::jumads-hippo-terraform-state/*",
				"arn:aws:s3:::*-static-website-*",
				"arn:aws:s3:::*-static-website-*/*"
			]
		},
		{
			"Effect": "Allow",
			"Action": [
				"dynamodb:GetItem",
				"dynamodb:PutItem",
				"dynamodb:DeleteItem",
				"dynamodb:DescribeTable",
				"dynamodb:CreateTable"
			],
			"Resource": "arn:aws:dynamodb:*:*:table/terraform-locks"
		},
		{
			"Effect": "Allow",
			"Action": [
				"kms:Decrypt",
				"kms:GenerateDataKey",
				"kms:DescribeKey"
			],
			"Resource": "arn:aws:kms:us-east-1:626146856453:alias/aws/s3"
		},
		{
			"Effect": "Allow",
			"Action": [
				"ec2:CreateVpc",
				"ec2:DeleteVpc",
				"ec2:DescribeVpcs",
				"ec2:CreateSubnet",
				"ec2:DeleteSubnet",
				"ec2:DescribeSubnets",
				"ec2:CreateInternetGateway",
				"ec2:DeleteInternetGateway",
				"ec2:DescribeInternetGateways",
				"ec2:AttachInternetGateway",
				"ec2:DetachInternetGateway",
				"ec2:CreateNatGateway",
				"ec2:DeleteNatGateway",
				"ec2:DescribeNatGateways",
				"ec2:CreateRouteTable",
				"ec2:DeleteRouteTable",
				"ec2:DescribeRouteTables",
				"ec2:CreateRoute",
				"ec2:DeleteRoute",
				"ec2:AssociateRouteTable",
				"ec2:DisassociateRouteTable",
				"ec2:CreateSecurityGroup",
				"ec2:DeleteSecurityGroup",
				"ec2:DescribeSecurityGroups",
				"ec2:AuthorizeSecurityGroupIngress",
				"ec2:AuthorizeSecurityGroupEgress",
				"ec2:RevokeSecurityGroupIngress",
				"ec2:RevokeSecurityGroupEgress",
				"ec2:CreateTags",
				"ec2:DeleteTags",
				"ec2:DescribeTags",
				"ec2:AllocateAddress",
				"ec2:ReleaseAddress",
				"ec2:DescribeAddresses"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"cloudfront:CreateDistribution",
				"cloudfront:GetDistribution",
				"cloudfront:UpdateDistribution",
				"cloudfront:DeleteDistribution",
				"cloudfront:CreateCloudFrontOriginAccessIdentity",
				"cloudfront:GetCloudFrontOriginAccessIdentity",
				"cloudfront:DeleteCloudFrontOriginAccessIdentity",
				"cloudfront:CreateInvalidation",
				"cloudfront:TagResource",
				"cloudfront:ListTagsForResource"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"ecs:CreateCluster",
				"ecs:DeleteCluster",
				"ecs:DescribeClusters",
				"ecs:RegisterTaskDefinition",
				"ecs:DeregisterTaskDefinition",
				"ecs:ListTaskDefinitions",
				"ecs:DescribeTaskDefinition",
				"ecs:CreateService",
				"ecs:UpdateService",
				"ecs:DeleteService",
				"ecs:DescribeServices",
				"ecs:ListTasks",
				"ecs:DescribeTasks"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"elasticloadbalancing:CreateLoadBalancer",
				"elasticloadbalancing:DeleteLoadBalancer",
				"elasticloadbalancing:DescribeLoadBalancers",
				"elasticloadbalancing:CreateTargetGroup",
				"elasticloadbalancing:DeleteTargetGroup",
				"elasticloadbalancing:DescribeTargetGroups",
				"elasticloadbalancing:RegisterTargets",
				"elasticloadbalancing:DeregisterTargets",
				"elasticloadbalancing:CreateListener",
				"elasticloadbalancing:DeleteListener",
				"elasticloadbalancing:DescribeListeners",
				"elasticloadbalancing:ModifyLoadBalancerAttributes",
				"elasticloadbalancing:DescribeLoadBalancerAttributes",
				"elasticloadbalancing:ModifyTargetGroup",
				"elasticloadbalancing:DescribeTargetGroupAttributes",
				"elasticloadbalancing:ModifyTargetGroupAttributes",
				"elasticloadbalancing:SetSecurityGroups"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"iam:CreateRole",
				"iam:DeleteRole",
				"iam:GetRole",
				"iam:PassRole",
				"iam:ListRolePolicies",
				"iam:ListAttachedRolePolicies",
				"iam:CreatePolicy",
				"iam:DeletePolicy",
				"iam:GetPolicy",
				"iam:AttachRolePolicy",
				"iam:DetachRolePolicy",
				"iam:PutRolePolicy",
				"iam:DeleteRolePolicy"
			],
			"Resource": [
				"arn:aws:iam::*:role/ecs-*",
				"arn:aws:iam::*:role/*-task-execution-role",
				"arn:aws:iam::*:role/*-task-role",
				"arn:aws:iam::*:policy/*-policy"
			]
		},
		{
			"Effect": "Allow",
			"Action": [
				"logs:CreateLogGroup",
				"logs:DeleteLogGroup",
				"logs:DescribeLogGroups",
				"logs:CreateLogStream",
				"logs:DescribeLogStreams",
				"logs:PutLogEvents"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"ecr:GetAuthorizationToken",
				"ecr:CreateRepository",
				"ecr:DescribeRepositories",
				"ecr:DeleteRepository",
				"ecr:PutImage",
				"ecr:BatchGetImage",
				"ecr:SetRepositoryPolicy",
				"ecr:GetRepositoryPolicy",
				"ecr:InitiateLayerUpload",
				"ecr:UploadLayerPart",
				"ecr:CompleteLayerUpload"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"acm:RequestCertificate",
				"acm:DescribeCertificate",
				"acm:DeleteCertificate",
				"acm:ListCertificates",
				"acm:ListTagsForCertificate",
				"acm:AddTagsToCertificate"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"route53:ListHostedZones",
				"route53:GetHostedZone",
				"route53:ChangeResourceRecordSets",
				"route53:ListResourceRecordSets",
				"route53:GetChange"
			],
			"Resource": "*"
		}
	]
}