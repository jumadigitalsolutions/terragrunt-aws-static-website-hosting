{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "S3BucketPermissions",
            "Effect": "Allow",
            "Action": [
                "s3:CreateBucket",
                "s3:DeleteBucket",
                "s3:Put*",
                "s3:Get*",
                "s3:List*",
                "s3:DeleteObject"
            ],
            "Resource": [
                "arn:aws:s3:::hippo-website-*",
                "arn:aws:s3:::route53-query-logs-*",
                "arn:aws:s3:::waf-logs-*"
            ]
        },
        {
            "Sid": "S3ObjectPermissions",
            "Effect": "Allow",
            "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:PutObjectTagging",
                "s3:GetObjectTagging"
            ],
            "Resource": [
                "arn:aws:s3:::hippo-website-*/*",
                "arn:aws:s3:::route53-query-logs-*/*",
                "arn:aws:s3:::waf-logs-*/*"
            ]
        },
        {
            "Sid": "S3GlobalActions",
            "Effect": "Allow",
            "Action": [
                "s3:ListAllMyBuckets",
                "s3:GetBucketLocation"
            ],
            "Resource": "*"
        },
        {
            "Sid": "CloudfrontPermissions",
            "Effect": "Allow",
            "Action": [
                "cloudfront:*Distribution*",
                "cloudfront:*Tag*",
                "cloudfront:*Invalidation*",
                "cloudfront:*OriginAccessControl*",
                "cloudfront:*ResponseHeadersPolicy*"
            ],
            "Resource": "*"
        },
        {
            "Sid": "Route53Permissions",
            "Effect": "Allow",
            "Action": [
                "route53:CreateHostedZone",
                "route53:ListHostedZones",
                "route53:ChangeResourceRecordSets",
                "route53:GetHostedZone",
                "route53:ListResourceRecordSets",
                "route53:GetChange",
                "route53:*KeySigningKey*",
                "route53:*HostedZoneDNSSEC",
                "route53:GetDNSSEC",
                "route53:*QueryLoggingConfig*",
                "route53:ListTagsForResource",
                "route53:UpdateHostedZoneComment"
            ],
            "Resource": "*"
        },
        {
            "Sid": "ACMCertificatePermissions",
            "Effect": "Allow",
            "Action": [
                "acm:*Certificate*",
                "acm:*Tags*",
                "acm:GetCertificate",
                "acm:ImportCertificate",
                "acm:RenewCertificate",
                "acm:ExportCertificate",
                "acm:ResendValidationEmail"
            ],
            "Resource": "*"
        },
        {
            "Sid": "ECSPermissions",
            "Effect": "Allow",
            "Action": [
                "ecs:*Cluster*",
                "ecs:*TaskDefinition*",
                "ecs:*Service*",
                "ecs:*Tasks*",
                "ecs:*Tag*"
            ],
            "Resource": "*"
        },
        {
            "Sid": "ECRPermissions",
            "Effect": "Allow",
            "Action": [
                "ecr:*Repository*",
                "ecr:GetAuthorizationToken",
                "ecr:*Layer*",
                "ecr:PutImage",
                "ecr:BatchGetImage",
                "ecr:*Tag*",
                "ecr:*ImageScan*"
            ],
            "Resource": "*"
        },
        {
            "Sid": "ElasticLoadBalancingPermissions",
            "Effect": "Allow",
            "Action": [
                "elasticloadbalancing:*LoadBalancer*",
                "elasticloadbalancing:*Listener*",
                "elasticloadbalancing:*Rule*",
                "elasticloadbalancing:*TargetGroup*",
                "elasticloadbalancing:Describe*",
                "elasticloadbalancing:*Tags*",
                "elasticloadbalancing:*Targets*"
            ],
            "Resource": "*"
        },
        {
            "Sid": "IAMRoleAndPolicyPermissions",
            "Effect": "Allow",
            "Action": [
                "iam:CreateRole",
                "iam:DeleteRole",
                "iam:GetRole",
                "iam:ListRoles",
                "iam:UpdateRole",
                "iam:TagRole",
                "iam:UntagRole",
                "iam:ListRoleTags",
                "iam:CreatePolicy",
                "iam:DeletePolicy",
                "iam:GetPolicy",
                "iam:ListPolicies",
                "iam:CreatePolicyVersion",
                "iam:DeletePolicyVersion",
                "iam:GetPolicyVersion",
                "iam:ListPolicyVersions",
                "iam:PutRolePolicy",
                "iam:GetRolePolicy",
                "iam:DeleteRolePolicy",
                "iam:ListRolePolicies",
                "iam:AttachRolePolicy",
                "iam:DetachRolePolicy",
                "iam:ListAttachedRolePolicies"
            ],
            "Resource": "*"
        },
        {
            "Sid": "IAMPassRolePermission",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/hippo-*",
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ecs.amazonaws.com",
                        "ecs-tasks.amazonaws.com",
                        "firehose.amazonaws.com",
                        "s3.amazonaws.com"
                    ]
                }
            }
        },
        {
            "Sid": "IAMServiceLinkedRolePermission",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/ecs.amazonaws.com/*",
                "arn:aws:iam::*:role/aws-service-role/elasticloadbalancing.amazonaws.com/*",
                "arn:aws:iam::*:role/aws-service-role/firehose.amazonaws.com/*",
                "arn:aws:iam::*:role/aws-service-role/route53.amazonaws.com/*"
            ]
        },
        {
            "Sid": "KMSPermissions",
            "Effect": "Allow",
            "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:Disable*",
                "kms:Schedule*",
                "kms:*Alias*",
                "kms:*Tag*",
                "kms:*Policy*",
                "kms:List*",
                "kms:Generate*",
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:*Grant*"
            ],
            "Resource": "*"
        },
        {
            "Sid": "CloudWatchLogsPermissions",
            "Effect": "Allow",
            "Action": [
                "logs:Create*",
                "logs:Delete*",
                "logs:Put*",
                "logs:Describe*",
                "logs:*Tag*",
                "logs:Get*",
                "logs:List*"
            ],
            "Resource": "*"
        },
        {
            "Sid": "WAFv2Permissions",
            "Effect": "Allow",
            "Action": [
                "wafv2:*WebACL*",
                "wafv2:*Tag*",
                "wafv2:*IPSet*",
                "wafv2:*RegexPatternSet*",
                "wafv2:*LoggingConfiguration*"
            ],
            "Resource": "*"
        },
        {
            "Sid": "KinesisFirehosePermissions",
            "Effect": "Allow",
            "Action": [
                "firehose:*DeliveryStream*",
                "firehose:*Tag*",
                "firehose:*Record*"
            ],
            "Resource": "*"
        },
        {
            "Sid": "TerraformStateAccess",
            "Effect": "Allow",
            "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:ListBucket",
                "s3:GetBucketVersioning",
                "s3:PutBucketVersioning",
                "s3:GetEncryptionConfiguration",
                "s3:GetBucketPublicAccessBlock",
                "s3:GetBucketAcl",
                "s3:GetBucketLocation",
                "s3:GetBucketTagging",
                "s3:GetBucketLogging",
                "s3:GetBucketPolicy"
            ],
            "Resource": [
                "arn:aws:s3:::jumads-hippo-terraform-state*",
                "arn:aws:s3:::jumads-hippo-terraform-state*/*"
            ]
        },
        {
            "Sid": "DynamoDBPermissions",
            "Effect": "Allow",
            "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
            ],
            "Resource": "arn:aws:dynamodb:*:*:table/terraform-state-lock"
        },
        {
            "Sid": "EC2Permissions",
            "Effect": "Allow",
            "Action": [
                "ec2:Describe*",
                "ec2:CreateVpc",
                "ec2:DeleteVpc",
                "ec2:CreateSubnet",
                "ec2:DeleteSubnet",
                "ec2:CreateRouteTable",
                "ec2:DeleteRouteTable",
                "ec2:CreateRoute",
                "ec2:DeleteRoute",
                "ec2:CreateInternetGateway",
                "ec2:DeleteInternetGateway",
                "ec2:CreateNatGateway",
                "ec2:DeleteNatGateway",
                "ec2:CreateSecurityGroup",
                "ec2:DeleteSecurityGroup",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:AuthorizeSecurityGroupEgress",
                "ec2:RevokeSecurityGroupIngress",
                "ec2:RevokeSecurityGroupEgress",
                "ec2:AllocateAddress",
                "ec2:ReleaseAddress",
                "ec2:AssociateRouteTable",
                "ec2:DisassociateRouteTable",
                "ec2:AttachInternetGateway",
                "ec2:DetachInternetGateway",
                "ec2:ModifyVpcAttribute",
                "ec2:CreateTags",
                "ec2:DeleteTags"
            ],
            "Resource": "*"
        }
    ]
}